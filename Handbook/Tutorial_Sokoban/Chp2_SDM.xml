<?xml version="1.0" encoding="UTF-8"?>
<cheatsheet
      title="Chapter 2: SDM">
   <intro>
      <description>
         In this Chapter, you'll be learning about Story Driven Modeling (SDM). For the
         interested reader, the content of this chapter is based on Part III of the 
         official eMoflon handbook.
         <br/><br/>
         To briefly explain, SDMs implement unidirectional model transformations. They're
         a pattern-based way of describing behavior. In other words, SDMs complete a 
         model's dynamic semantics!
         <br/><br/>
         Something to keep in mind when working with SDMs is that they follow a 
         precondition/postcondition format. This will make more sense as we proceed,
         but do be aware that some patterns will need specific context elements to succeed,
         and others will need to ensure new elements exist upon exit.
         <br/><br/>
         We'll start the chapter by modeling how Board will behave, specifically how it
         will handle creating Fields, clearing Fields of any Figures, and selecting Figures.
         We'll then proceed to describing each Figure.
         Let's begin!
      </description>
   </intro>
   <item
         title="Step 1 - Board.Create()">
      <description>
         <b>Body</b>
      </description>
   </item>
   <item
         title="Step 2 - Board.Clear()">
      <description>
         <b>Body</b>
      </description>
   </item>
   <item
         title="Step 3 - bindField.pattern">
      <description>
         <b>Body</b>
      </description>
   </item>
   <item
         title="step 4 - removeFigure.pattern">
      <description>
         <b>Body</b>
      </description>
   </item>
   <item
         title="step 5 - Board.fieldSelected()">
      <description>
         <b>Body</b>
      </description>
   </item>
   <item
         title="step 6 - checkSelected.pattern">
      <description>
         <b>Body</b>
      </description>
   </item>
   <item
         title="step 7 - selectFigure.pattern">
      <description>
         <b>Body</b>
      </description>
   </item>
   <item
         title="Step 8 - Figure.moveTo()">
      <description>
         Let's finally describe how each Figure will move about the game. First, replace
         the dummy moveTo method in Figure with:
         <br/>
         moveTo(field:Field):void {<br/>
         [moveFigure]<br/>
         return<br/>
         }<br/>
         <br/>
         We consider this control and pattern to be the fundamental movement of any figure.
         We will customize each figure (such as Sokoban's push, and Boulder's immobility) in
         their respective classes by overriding this method.
      </description>
   </item>
   <item
         title="Step 9 - moveFigure.pattern">
      <description>
         <b>Body</b>
      </description>
   </item>
   <item
         title="Step 10 - Keeping Boulder and Block still">
      <description>
         <b>Body</b>
      </description>
   </item>
   <item
         title="step 11 - moving Sokoban">
      <description>
         <b>Body</b>
      </description>
   </item>
   <item
         title="End of Chapter 2">
      <description>
         <b>Body</b>
      </description>
   </item>
 </cheatsheet>
